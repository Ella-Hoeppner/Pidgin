use crate::{Instruction, InstructionBlock, Value};

pub type VirtualRegister = usize;

use Instruction::*;

impl<V> Instruction<VirtualRegister, V> {
  pub fn input_and_output_registers(
    &self,
  ) -> (Vec<VirtualRegister>, Vec<VirtualRegister>) {
    match self {
      DebugPrint(_) => (vec![], vec![]),
      Clear(_) => (vec![], vec![]),
      Copy(_, _) => todo!(),
      Const(_, _) => todo!(),
      Print(_) => todo!(),
      Return(_) => todo!(),
      CopyArgument(_) => todo!(),
      StealArgument(_) => todo!(),
      Call(_, _, _) => todo!(),
      Apply(_, _) => todo!(),
      CallSelf(_, _) => todo!(),
      ApplySelf(_) => todo!(),
      CallAndReturn(_, _) => todo!(),
      ApplyAndReturn(_, _) => todo!(),
      CallSelfAndReturn(_) => todo!(),
      ApplySelfAndReturn(_) => todo!(),
      CallingFunction(_) => todo!(),
      Jump(_) => todo!(),
      Lookup(_, _) => todo!(),
      If(_) => todo!(),
      Else => todo!(),
      ElseIf(_) => todo!(),
      EndIf => todo!(),
      Partial(_, _, _) => todo!(),
      Compose(_, _, _) => todo!(),
      FindSome(_, _, _) => todo!(),
      ReduceWithoutInitialValue(_, _, _) => todo!(),
      ReduceWithInitialValue(_, _, _) => todo!(),
      Memoize(_, _) => todo!(),
      Constantly(_, _) => todo!(),
      NumericalEqual(_, _, _) => todo!(),
      IsZero(_, _) => todo!(),
      IsNan(_, _) => todo!(),
      IsInf(_, _) => todo!(),
      IsEven(_, _) => todo!(),
      IsOdd(_, _) => todo!(),
      IsPos(_, _) => todo!(),
      IsNeg(_, _) => todo!(),
      Inc(_, _) => todo!(),
      Dec(_, _) => todo!(),
      Negate(_, _) => todo!(),
      Abs(_, _) => todo!(),
      Floor(_, _) => todo!(),
      Ceil(_, _) => todo!(),
      Sqrt(_, _) => todo!(),
      Exp(_, _) => todo!(),
      Exp2(_, _) => todo!(),
      Ln(_, _) => todo!(),
      Log2(_, _) => todo!(),
      Add(_, _, _) => todo!(),
      Subtract(_, _, _) => todo!(),
      Multiply(_, _, _) => todo!(),
      Divide(_, _, _) => todo!(),
      Pow(_, _, _) => todo!(),
      Mod(_, _, _) => todo!(),
      Quot(_, _, _) => todo!(),
      Min(_, _, _) => todo!(),
      Max(_, _, _) => todo!(),
      GreaterThan(_, _, _) => todo!(),
      GreaterThanOrEqual(_, _, _) => todo!(),
      LessThan(_, _, _) => todo!(),
      LessThanOrEqual(_, _, _) => todo!(),
      Rand(_) => todo!(),
      UpperBoundedRand(_, _) => todo!(),
      LowerUpperBoundedRand(_, _, _) => todo!(),
      RandInt(_, _) => todo!(),
      LowerBoundedRandInt(_, _, _) => todo!(),
      Equal(_, _, _) => todo!(),
      NotEqual(_, _, _) => todo!(),
      Not(_, _) => todo!(),
      And(_, _, _) => todo!(),
      Or(_, _, _) => todo!(),
      Xor(_, _, _) => todo!(),
      IsEmpty(_, _) => todo!(),
      First(_, _) => todo!(),
      Count(_, _) => todo!(),
      Flatten(_, _) => todo!(),
      Remove(_, _) => todo!(),
      Filter(_, _) => todo!(),
      Map(_, _) => todo!(),
      DoubleMap(_, _, _) => todo!(),
      MultiCollectionMap(_, _) => todo!(),
      Set(_, _, _) => todo!(),
      SetIn(_, _, _) => todo!(),
      Get(_, _, _) => todo!(),
      GetIn(_, _, _) => todo!(),
      Update(_, _, _) => todo!(),
      UpdateIn(_, _, _) => todo!(),
      MinKey(_, _, _) => todo!(),
      MaxKey(_, _, _) => todo!(),
      Push(_, _) => todo!(),
      Sort(_) => todo!(),
      SortBy(_, _) => todo!(),
      EmptyList(_) => todo!(),
      Last(_, _) => todo!(),
      Rest(_) => todo!(),
      ButLast(_) => todo!(),
      Nth(_, _, _) => todo!(),
      NthFromLast(_, _, _) => todo!(),
      Cons(_, _) => todo!(),
      Concat(_, _) => todo!(),
      Take(_, _) => todo!(),
      Drop(_, _) => todo!(),
      Reverse(_) => todo!(),
      Distinct(_) => todo!(),
      Sub(_, _, _) => todo!(),
      Partition(_, _, _) => todo!(),
      SteppedPartition(_, _, _) => todo!(),
      Pad(_, _, _) => todo!(),
      EmptyMap(_) => todo!(),
      Keys(_, _) => todo!(),
      Values(_, _) => todo!(),
      Zip(_, _, _) => todo!(),
      Invert(_, _) => todo!(),
      Merge(_, _, _) => todo!(),
      MergeWith(_, _, _) => todo!(),
      MapKeys(_, _, _) => todo!(),
      MapValues(_, _, _) => todo!(),
      SelectKeys(_, _) => todo!(),
      EmptySet(_) => todo!(),
      Union(_, _, _) => todo!(),
      Intersection(_, _, _) => todo!(),
      Difference(_, _, _) => todo!(),
      SymmetricDifference(_, _, _) => todo!(),
      InfiniteRange(_) => todo!(),
      UpperBoundedRange(_, _) => todo!(),
      LowerUpperBoundedRange(_, _, _) => todo!(),
      InfiniteRepeat(_, _) => todo!(),
      BoundedRepeat(_, _, _) => todo!(),
      InfiniteRepeatedly(_, _) => todo!(),
      BoundedRepeatedly(_, _, _) => todo!(),
      InfiniteIterate(_, _, _) => todo!(),
      BoundedIterate(_, _, _) => todo!(),
      CreateCell(_) => todo!(),
      GetCellValue(_, _) => todo!(),
      SetCellValue(_, _) => todo!(),
      UpdateCell(_, _) => todo!(),
      CreateCoroutine(_) => todo!(),
      IsCoroutineAlive(_, _) => todo!(),
      Yield(_) => todo!(),
      YieldAndAccept(_, _, _) => todo!(),
      IsNil(_, _) => todo!(),
      IsBool(_, _) => todo!(),
      IsChar(_, _) => todo!(),
      IsNum(_, _) => todo!(),
      IsInt(_, _) => todo!(),
      IsFloat(_, _) => todo!(),
      IsSymbol(_, _) => todo!(),
      IsString(_, _) => todo!(),
      IsList(_, _) => todo!(),
      IsMap(_, _) => todo!(),
      IsSet(_, _) => todo!(),
      IsCollection(_, _) => todo!(),
      IsFn(_, _) => todo!(),
      IsError(_, _) => todo!(),
      IsCell(_, _) => todo!(),
      IsCoroutine(_, _) => todo!(),
      ToBool(_, _) => todo!(),
      ToChar(_, _) => todo!(),
      ToNum(_, _) => todo!(),
      ToInt(_, _) => todo!(),
      ToFloat(_, _) => todo!(),
      ToSymbol(_, _) => todo!(),
      ToString(_, _) => todo!(),
      ToList(_, _) => todo!(),
      ToMap(_, _) => todo!(),
      ToSet(_, _) => todo!(),
      ToError(_, _) => todo!(),
    }
  }
}
